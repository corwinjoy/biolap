-- To enable external procedure calls you will need to modify your network/admin/listener.ora file
-- to look like this to disable external call security
/*

SID_LIST_LISTENER =
  (SID_LIST =
    (SID_DESC =
      (SID_NAME = PLSExtProc)
      (ORACLE_HOME = C:\oracle\product\10.1.0\db_1)
      (PROGRAM = extproc)
	(ENVS="EXTPROC_DLLS=ANY")
    )
  )

LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS_LIST =
        (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC))
      )
      (ADDRESS_LIST =
        (ADDRESS = (PROTOCOL = TCP)(HOST = bcm154-8.alkek.dhcp.bcm.tmc.edu)(PORT = 1521))
      )
    )
  )

*/

-- Oracle declarations for the functions in StdAfx.cpp

// PL/SQL to register oracle aggregate interface
// created as user system
#if 0

CREATE OR REPLACE LIBRARY SEQ_LIB AS  
     'C:\ORA_SUFFIX.dll'; -- Location of your dll
/


CREATE OR REPLACE FUNCTION 
SEQ_AggregateInitialize(dummy IN NUMBER) RETURN BINARY_INTEGER AS LANGUAGE C NAME 
       "AggregateInitialize" LIBRARY SEQ_LIB WITH CONTEXT PARAMETERS(CONTEXT, dummy OCINumber, RETURN UB4);
/

CREATE OR REPLACE FUNCTION 
SEQ_AggregateIterate(seq IN blob, slist IN BINARY_INTEGER) RETURN BINARY_INTEGER AS LANGUAGE C NAME 
       "AggregateIterate" LIBRARY SEQ_LIB WITH 
       CONTEXT PARAMETERS(CONTEXT, seq, slist UB4, RETURN int);
/


CREATE OR REPLACE FUNCTION 
SEQ_AggregateMerge(slist_this IN BINARY_INTEGER, slist_other IN BINARY_INTEGER) 
RETURN BINARY_INTEGER AS LANGUAGE C NAME 
       "AggregateMerge" LIBRARY SEQ_LIB WITH 
       CONTEXT PARAMETERS(CONTEXT, slist_this UB4,slist_other UB4,RETURN int);
/

CREATE OR REPLACE FUNCTION 
SEQ_AggregateTerminate(slist IN BINARY_INTEGER) RETURN DOUBLE PRECISION AS LANGUAGE C NAME 
       "AggregateTerminate" LIBRARY SEQ_LIB WITH 
       CONTEXT PARAMETERS(CONTEXT, slist UB4,RETURN DOUBLE);
/

-- fast aggregation interface for hashed values
create or replace type SeqSimHashImpl as object
(
  slist NUMBER,
  static function ODCIAggregateInitialize(sctx IN OUT SeqSimHashImpl) 
    return number,
  member function ODCIAggregateIterate(self IN OUT SeqSimHashImpl, 
    seq IN blob) return number,
  member function ODCIAggregateTerminate(self IN SeqSimHashImpl, 
    returnValue OUT number, flags IN number) return number,
  member function ODCIAggregateMerge(self IN OUT SeqSimHashImpl, 
    ctx2 IN SeqSimHashImpl) return number
);
/

create or replace type body SeqSimHashImpl is 
static function ODCIAggregateInitialize(sctx IN OUT SeqSimHashImpl) 
return number is 
begin
  sctx := SeqSimHashImpl(SEQ_AggregateInitialize(0));
  return ODCIConst.Success;
end;

member function ODCIAggregateIterate(self IN OUT SeqSimHashImpl, seq IN BLOB) 
return number is
  status BINARY_INTEGER;
begin
status := SEQ_AggregateIterate(seq, self.slist);
  return ODCIConst.Success;
end;

member function ODCIAggregateTerminate(self IN SeqSimHashImpl, returnValue OUT number, 
flags IN number) return number is
begin
  returnValue := SEQ_AggregateTerminate(self.slist);
  return ODCIConst.Success;
end;

member function ODCIAggregateMerge(self IN OUT SeqSimHashImpl, ctx2 IN SeqSimHashImpl) 
return number is
  status BINARY_INTEGER;
begin
  status := SEQ_AggregateMerge(self.slist, ctx2.slist);
  return ODCIConst.Success;
end;
end;
/

CREATE OR REPLACE FUNCTION SeqSimHash (input BLOB) RETURN NUMBER 
AGGREGATE USING SeqSimHashImpl;
/

-- interface to get hash of sequence
CREATE OR REPLACE PROCEDURE 
ProcSeqHash(seq IN clob, hash in out nocopy blob) AS LANGUAGE C NAME 
       "SeqHash" LIBRARY SEQ_LIB WITH 
       CONTEXT PARAMETERS(CONTEXT, seq, hash);
/


CREATE OR REPLACE FUNCTION SeqHash(seq IN clob) 
return blob is
retval blob;
begin
-- retval must contain at least on character so
-- as to not get a "passing NULL value" error
retval := UTL_RAW.CAST_TO_RAW('X'); 
ProcSeqHash(seq, retval);
return retval;
end;
/


select UTL_RAW.cast_to_varchar2(SeqHash('KITTY')) from dual;

-- Friendly sequence aggregation interface
create or replace type SeqSimImpl as object
(
  slist NUMBER,
  static function ODCIAggregateInitialize(sctx IN OUT SeqSimImpl) 
    return number,
  member function ODCIAggregateIterate(self IN OUT SeqSimImpl, 
    seq IN CLOB) return number,
  member function ODCIAggregateTerminate(self IN SeqSimImpl, 
    returnValue OUT number, flags IN number) return number,
  member function ODCIAggregateMerge(self IN OUT SeqSimImpl, 
    ctx2 IN SeqSimImpl) return number
);
/

create or replace type body SeqSimImpl is 
static function ODCIAggregateInitialize(sctx IN OUT SeqSimImpl) 
return number is 
begin
  sctx := SeqSimImpl(SEQ_AggregateInitialize(0));
  return ODCIConst.Success;
end;

member function ODCIAggregateIterate(self IN OUT SeqSimImpl, seq IN CLOB) 
return number is
  status BINARY_INTEGER;
begin
status := SEQ_AggregateIterate(SeqHash(seq), self.slist);
  return ODCIConst.Success;
end;

member function ODCIAggregateTerminate(self IN SeqSimImpl, returnValue OUT number, 
flags IN number) return number is
begin
  returnValue := SEQ_AggregateTerminate(self.slist);
  return ODCIConst.Success;
end;

member function ODCIAggregateMerge(self IN OUT SeqSimImpl, ctx2 IN SeqSimImpl) 
return number is
  status BINARY_INTEGER;
begin
  status := SEQ_AggregateMerge(self.slist, ctx2.slist);
  return ODCIConst.Success;
end;
end;
/

CREATE OR REPLACE FUNCTION SeqSim (input CLOB) RETURN NUMBER 
AGGREGATE USING SeqSimImpl;
/


drop table temp;
create table temp (
seq CLOB,
hash_seq BLOB
);

insert into temp values('GATTACA', NULL);
insert into temp values('GATTACA', NULL);
insert into temp values('ACA', NULL);
commit;

update temp set hash_seq = SeqHash(seq);
commit;

-- Similarity matrix:
-- X 5 1
-- 5 X 1
-- 1 1 X 

-- should get 5+1+1/3 = 7/3 = 2.333
select SeqSim(seq) from temp;
select SeqSimHash(hash_seq) from temp;    

drop public synonym seqhash;
grant execute on seqhash to public;
create public synonym seqhash for seqhash; 

drop public synonym seqsimhash;
grant execute on seqsimhash to public;
create public synonym seqsimhash for seqsimhash; 

drop public synonym seqsim;
grant execute on seqsim to public;
create public synonym seqsim for seqsim; 

#endif

   
